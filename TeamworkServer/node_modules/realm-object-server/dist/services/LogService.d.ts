/// <reference types="uws" />
/// <reference types="node" />
import { Logger } from '../shared/Logger';
import * as CircularBuffer from 'circular-buffer';
import * as uws from 'uws';
import { IncomingMessage } from 'http';
import { Socket } from 'net';
export declare class LogService {
    buffers: {
        [level: string]: CircularBuffer;
    };
    logger: Logger;
    rootLogger: Logger;
    listener: (level: string, msg: string, ctx: object) => void;
    wss: uws.Server;
    constructor();
    appendTestEntries(): string;
    streamLogs(req: IncomingMessage, socket: Socket, head: any, level: string): Promise<void>;
    streamFatalLogs(req: IncomingMessage, socket: Socket, head: any): Promise<void>;
    streamErrorLogs(req: IncomingMessage, socket: Socket, head: any): Promise<void>;
    streamWarnLogs(req: IncomingMessage, socket: Socket, head: any): Promise<void>;
    streamInfoLogs(req: IncomingMessage, socket: Socket, head: any): Promise<void>;
    streamDetailLogs(req: IncomingMessage, socket: Socket, head: any): Promise<void>;
    streamDebugLogs(req: IncomingMessage, socket: Socket, head: any): Promise<void>;
    streamTraceLogs(req: IncomingMessage, socket: Socket, head: any): Promise<void>;
    streamAllLogs(req: IncomingMessage, socket: Socket, head: any): Promise<void>;
    setRootLogger(l: Logger): void;
    setLogger(l: Logger): void;
    message(level: string, msg: string, ctx: object): void;
    isRelevantLevel(actualLevel: string, targetLevel: string): boolean;
    start(): Promise<void>;
    stop(): Promise<void>;
    private upgradeWebSocket(req, socket, head);
}
