/// <reference types="node" />
import { Server } from "../Server";
import { Permission, PermissionChange, PermissionOffer, PermissionOfferResponse, User, RealmFile, WildcardSpecificPermission, UserSpecificPermission } from '../realms';
import { EventEmitter } from 'events';
export interface IPermissionServiceEventEmitter {
    on(event: 'handlePermissionChange', listener: (changeEvent: Realm.Sync.ChangeEvent) => void): this;
    on(event: 'handleUserSpecificManagementChange', listener: (changeEvent: Realm.Sync.ChangeEvent) => void): this;
}
export declare class PermissionService extends EventEmitter implements IPermissionServiceEventEmitter {
    static MANAGEMENT_REALM_REGEX: string;
    static ADMIN_REALM_REGEX: string;
    private adminRealm;
    private wildcardPermissionRealm;
    private privateKey;
    private publicKey;
    private dataPath;
    private logger;
    private adminTokenUser;
    private server;
    private handleManagementChangeCallback;
    private handleAdminChangeCallback;
    start(server: Server): Promise<void>;
    serverStarted(server: Server): Promise<void>;
    stop(): void;
    onDemand(accessToken: string): Promise<{
        userId: string;
        affectedPermissionsCount: number;
    }>;
    updateOrCreateUserPermissionWithAdminPermission(userSpecificRealm: Realm, adminPermission: Permission): boolean;
    getUserByUserId(userId: string): User;
    getUserByProviderId(providerId: string, provider: string): User;
    getUserIdsWithMetadata(key: string, value: string): string[];
    getUsersByUserIds(userIds: string[]): Realm.Results<User>;
    getManagementRealmForUserId(userId: string): Promise<Realm>;
    grantReadOnlyAccessToWildcardPermissionRealm(): Promise<void>;
    applyPermissionChangeInAdminRealm(realmFilePath: string, userId?: string, mayRead?: boolean, mayWrite?: boolean, mayManage?: boolean): Promise<void>;
    getUserSpecificPermissionRealm(userId: string): Promise<Realm>;
    getWildcardPermissionAndAssociatedRealm(realmPath: string): Promise<{
        wildcardPermission: WildcardSpecificPermission;
        wildcardPermissionRealm: Realm;
    }>;
    getUserSpecificPermissionAndAssociatedRealm(realmPath: string, userId: string): Promise<{
        userSpecificPermission: UserSpecificPermission;
        userSpecificRealm: Realm;
    }>;
    getGrantorSpecificPermissionAndAssociatedRealm(realmPath: string, userId: string, granteeId: string): Promise<{
        grantorSpecificPermission: UserSpecificPermission;
        grantorSpecificRealm: Realm;
    }>;
    createOrUpdateWildcardPermissionRealmFromReflection(wildcardPermissionRealm: Realm, permissionToReflect: Permission, permissionToUpdate?: WildcardSpecificPermission): void;
    createOrUpdateUserSpecificRealmFromReflection(userSpecificRealm: Realm, permissionToReflect: Permission, permissionToUpdate?: UserSpecificPermission): void;
    private handleAdminRealmPermissionToReflection(changeEvent);
    private handleManagementRealmChange(changeEvent);
    handlePermissionOfferObject(permissionOffer: PermissionOffer, ownerId: string, realm: Realm): void;
    handlePermissionOfferResponseObject(permissionOfferResponse: PermissionOfferResponse, userId: string, realm: Realm): Promise<void>;
    handlePermissionChangeObject(permissionChange: PermissionChange, ownerId: string, realm: Realm): void;
    validateUserIdCanChangePermissionsForPath(userId: string, path: string): void;
    handleWildcardUserIdUrl(permissionChange: PermissionChange, path: string): void;
    handleWildcardRealmUrlForUser(permissionChange: PermissionChange, ownerId: string): void;
    handleWildcardRealmUrlForAllUsers(permissionChange: PermissionChange, ownerId: string): void;
    setPermissionChangesInAdminRealm(users: Realm.Results<User>, realmFiles: Realm.Results<RealmFile>, mayWrite: boolean, mayRead: boolean, mayManage: boolean, permissionChange?: PermissionChange): void;
}
