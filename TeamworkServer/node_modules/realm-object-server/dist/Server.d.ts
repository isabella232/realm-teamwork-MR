import { Discovery } from './discovery';
import { Logger } from './shared/Logger';
import { RealmFactory } from "./RealmFactory";
export declare class ServerValidationError extends Error {
}
export declare class ServerStartError extends Error {
}
export declare class ServerConfiguration {
    agreement?: string | {
        email: string;
        terms: string;
        agreeToLearnAboutUpdatesAndFixes: boolean;
    };
}
export interface ServerStartParams {
    dataPath: string;
    privateKeyPath?: string;
    publicKeyPath?: string;
    autoKeyGen?: boolean;
    logger?: Logger;
    logLevel?: string;
    address?: string;
    port?: number;
    discovery?: Discovery;
    https?: boolean;
    httpsKeyPath?: string;
    httpsCertChainPath?: string;
    httpsPort?: number;
    httpsAddress?: string;
}
export declare enum ServiceState {
    Created = 0,
    Starting = 1,
    Running = 2,
    Stopping = 3,
    Stopped = 4,
}
export declare class Server {
    protected runningParams: ServerStartParams;
    config: ServerConfiguration;
    services: any[];
    privateKey: string;
    publicKey: string;
    adminToken: string;
    realmFactory: RealmFactory;
    readonly version: string;
    private _started;
    readonly started: boolean;
    readonly dataPath: string;
    readonly discovery: Discovery;
    readonly logger: Logger;
    readonly publicKeyPath: string;
    readonly privateKeyPath: string;
    private expressApp;
    private httpServer;
    private httpAccessLogger;
    private httpsServer;
    constructor(config?: ServerConfiguration);
    useMiddleware(...args: any[]): Server;
    start(params: ServerStartParams): Promise<void>;
    readonly address: string;
    readonly secureAddress: string;
    shutdown(): Promise<void>;
    addServices(...services: any[]): this;
    addService(service: any | string, config?: object): this;
    removeService(service: any | string): this;
    getService(name: string): any;
    private upgradeHandler(req, socket, head);
    private injectLogger();
    private addServiceEndpoints(service);
    private startServices();
    private startService(service);
    private stopServices();
    private stopService(service);
    private authenticationMiddleware(req, res, next);
    private processException(error);
    private errorHandler(error, req, res, next);
    private validateStartParams(params);
}
